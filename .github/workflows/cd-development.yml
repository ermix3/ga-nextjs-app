name: CD - NextJS deploy to server [Development] üöÄ

on:
  workflow_run:
    workflows: ["CI - NextJS frontend build, push"]
    types: [completed]
    branches: [develop]

env:
  REGISTRY: docker.io
  IMAGE_NAME: nextjs-frontend
  NETWORK_NAME: fullstack-network

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4

      - name: üîê Set up SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: üõ†Ô∏è Prepare Remote Server (Install Docker & Compose, Setup Directory & Network)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME_DEV }}@${{ secrets.SSH_IP_DEV }} << EOF

            export NETWORK_NAME=${{ env.NETWORK_NAME }}

            echo "üîç Checking Docker installation..."
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              apt-get update
              apt-get install -y ca-certificates curl gnupg
              install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              chmod a+r /etc/apt/keyrings/docker.gpg
              echo "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
              apt-get update
              apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              echo "‚úÖ Docker installed."
            else
              echo "‚úÖ Docker already installed."
            fi

            echo "üîç Checking Docker Compose installation..."
            if ! command -v docker compose &> /dev/null && ! command -v docker-compose &> /dev/null; then
              echo "üì¶ Installing Docker Compose..."
              apt-get update
              apt-get install -y docker-compose-plugin

              if ! command -v docker compose &> /dev/null; then
                echo "üì¶ Installing standalone Docker Compose (fallback)..."
                curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
              fi

              echo "‚úÖ Docker Compose installed."
            else
              echo "‚úÖ Docker Compose already installed."
            fi

            echo "üßπ Cleaning up old frontend directory..."
            rm -rf /frontend

            echo "üìÅ Creating /frontend directory..."
            mkdir -p /frontend

            echo "üåê Ensuring Docker network exists..."
            if ! docker network inspect "$NETWORK_NAME" >/dev/null 2>&1; then
              echo "üåê Creating Docker network: $NETWORK_NAME"
              docker network create "$NETWORK_NAME"
            else
              echo "‚úÖ Docker network $NETWORK_NAME exists."
            fi

            echo "üßº Removing unused Docker images..."
            docker image prune -af
          EOF

      - name: üì§ Copy docker-compose and NGINX config to Remote Server
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.SSH_USERNAME_DEV }}@${{ secrets.SSH_IP_DEV }}:/frontend
          scp -o StrictHostKeyChecking=no nginx.frontend.conf ${{ secrets.SSH_USERNAME_DEV }}@${{ secrets.SSH_IP_DEV }}:/frontend

      - name: üöÄ Deploy Frontend Container
        env:
          FRONTEND_IMAGE: ${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME_DEV }}@${{ secrets.SSH_IP_DEV }} << EOF
            cd /frontend

            export DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
            export IMAGE_NAME=${{ env.IMAGE_NAME }}
            export APP_NAME=${{ secrets.APP_NAME }}

            echo "üì• Pulling latest frontend image..."
            docker pull ${FRONTEND_IMAGE}

            echo "üîÅ Restarting containers..."
            if command -v docker compose &> /dev/null; then
              docker compose -f docker-compose.prod.yml down
              docker compose -f docker-compose.prod.yml up -d
            else
              docker-compose -f docker-compose.prod.yml down
              docker-compose -f docker-compose.prod.yml up -d
            fi
          EOF
