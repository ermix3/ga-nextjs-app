name: CD - NextJS deploy to server [Development]

on:
  workflow_run:
    workflows: [ "CI - NextJS frontend build, push" ]
    types: [ completed ]
    branches: [ develop ]

env:
  APP_NAME: Ecom
  IMAGE_NAME: nextjs-frontend
  NETWORK_NAME: fullstack-network

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Download deployment files from CI workflow
        uses: dawidd6/action-download-artifact@v10
        with:
          workflow: ci.yml
          workflow_conclusion: success
          name: deploy-files
          path: ./deployment
          run_id: ${{ github.event.workflow_run.id }}

      - name: Read image tag
        id: read-tag
        run: echo "IMAGE_TAG=$(cat ./deployment/image_tag.txt)" >> $GITHUB_ENV

      - name: 🔐 Set up SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: 🛠️ Prepare Remote Server (Install Docker & Compose, Setup Directory & Network)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME_DEV }}@${{ secrets.SSH_HOST_IP_DEV }} << EOF

            export NETWORK_NAME=${{ env.NETWORK_NAME }}

            echo "🔍 Checking Docker installation..."
            if ! command -v docker &> /dev/null; then
              echo "📦 Installing Docker..."
              apt-get update
              apt-get install -y ca-certificates curl gnupg
              install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              chmod a+r /etc/apt/keyrings/docker.gpg
              echo "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
              apt-get update
              apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              echo "✅ Docker installed."
            else
              echo "✅ Docker already installed."
            fi

            echo "🔍 Checking Docker Compose installation..."
            if ! command -v docker compose &> /dev/null && ! command -v docker-compose &> /dev/null; then
              echo "📦 Installing Docker Compose..."
              apt-get update
              apt-get install -y docker-compose-plugin

              if ! command -v docker compose &> /dev/null; then
                echo "📦 Installing standalone Docker Compose (fallback)..."
                curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
              fi

              echo "✅ Docker Compose installed."
            else
              echo "✅ Docker Compose already installed."
            fi

            echo "📁 Creating /frontend directory..."
            mkdir -p /frontend
          
            echo "📂 Creating .htpasswd file..."
            touch /frontend/.htpasswd

            echo "🌐 Ensuring Docker network exists..."
            if ! docker network inspect "$NETWORK_NAME" >/dev/null 2>&1; then
              echo "🌐 Creating Docker network: $NETWORK_NAME"
              docker network create "$NETWORK_NAME"
            else
              echo "✅ Docker network $NETWORK_NAME exists."
            fi

            echo "🧼 Removing unused Docker images..."
            docker image prune -af
          EOF

      - name: 📤 Copy docker-compose and NGINX config to Remote Server
        run: |
          scp -o StrictHostKeyChecking=no ./deployment/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST_IP }}:/frontend

      - name: 🚀 Deploy Frontend Container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME_DEV }}@${{ secrets.SSH_HOST_IP_DEV }} << 'EOF'

            export DOCKER_PROVIDER_USERNAME=${{ secrets.DOCKER_PROVIDER_USERNAME }}
            export FRONTEND_IMAGE=${{ secrets.DOCKER_PROVIDER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            export APP_NAME=${{ env.APP_NAME }}
            export NETWORK_NAME=${{ env.NETWORK_NAME }}

            # Set docker compose command
            if command -v docker compose &> /dev/null; then
              DOCKER_COMPOSE="docker compose"
            elif command -v docker-compose &> /dev/null; then
              DOCKER_COMPOSE="docker-compose"
            else
              echo "ERROR: Docker Compose is not installed!"
              exit 1
            fi

            echo "📂 Changing to /frontend directory..."
            cd /frontend

            echo "🔧 Setting execute permission for manage_ips.sh..."
            chmod +x /frontend/manage_ips.sh

            echo "Using Docker Compose command: $DOCKER_COMPOSE"
            echo "🔁 Restarting containers..."
            $DOCKER_COMPOSE -f docker-compose.prod.yml down
            $DOCKER_COMPOSE -f docker-compose.prod.yml up -d
          EOF
